Book 1 CH 2 from YDKJS

Section: Values & Types


 built in types: 

 string

 number

 boolean

null and undefined

object

symbol

we can use typeof operator to examine a value

ex. 

var a;

typeof a; //undefined

a = "hello world";  

typeof a; 	//string


Objects

var obj = {
	
	a: "hello world",
	b: 41,
	c: true
};

to see what is stored in the obj;

obj.a

setting properties with values

one can retrieve values of the properties dot notation or bracket notation

ex. of dot notation 

obj.a

ex. of bracket notation

obj["a"]

array and function should be subtypes of objects

brackets are useful when one is attempting to access it from another variable or object

var obj = {a:2};

var b = "a";

obj[b] // 2

it would be the same as

obj["a"];


Section: Arrays

array hold values in numerical index positions

ex.

var arr = ["hello world", 42, true];

arr[1];
arr.length;

arrays = numerically position values

objects = named properties

Section: Functions

function (condition) {
	
	console.log("run this code");

}

Section: Built-In Type Methods

run thru a brief explanation of how built in types such as

strings can be run thru their own object wrapper form such as a string will be wrapped by a string object wrapper form

a.toUpperCase(); would work

Section: Comparing Values


value comparsion : equality vs inequality

results: boolean (true or false)

	SubSection: Coercion

	explicit: obvious coversion of one type to another type

	implicit: whereas this conducted from another operation. a side effect

	explicit

		var a = "43";

		var b = Number(a);

	implicit;

	var a = 42;

	var b = a * 1;

	SubSection: Truthy & Falsy

	== vs ===

	== with coercion

	=== with coercion "strict"

	read section 11.9.3 of the ES5

	http://www.ecma-international.org/ecma-262/5.1/


	Subsection: Inequality

	< > <= >=  for inequality, relation comparsion

	no strict inequality operators

	Subsection: Variables

	certains words cannot be used for idenification purposes

	Hoisting - variable that is called within a scope, such as a function. Better use hoisting than declaring var all over the place

	formally declare your variables

	ES6lets you declare variables to belong to individual blocks using the keyword let

Conditionals

if (a > 1) {
	
	...
}

else if (a === 1) {
	
	...
}

else if (a == 10) {
	

}

else {
	
	...
}

switch (a > 1) {

    case 2: 
    
        //do something
        break;
        
    case 10;
    
        //do something
        break;
        
    default:
    
        //fallback
}

Conditional operators

aka ternary perator. 

ex.

var a = 42;

var b = (a > 41) ? "hello" : "world";

//simliar to 

if (a > 41) {

    b = "hello";
}

else {

b = "world";

}

Strict Mode

rules for behaviors

used by the following keywords

"use strict"

Functions As Values

anonymous - functions that are not named

named functions - 

var foo = function () {

    ...
}

var b = function bar() {

    ...
}

x();

bar();

Immediately Invoked Function Expressions (IIFEs)

(function IIFE() {

    console.log("Hello!");
})();

Closure

having access to function's scope aka variables even after a function has ran

Modules

most common closure

encapsulation within modules?

This identifier

points to object 


Prototypes

backup plan when it can not find an object's properties

object.create(..)

Old & New

Polyfilling - defintion of a new feature and creating code that one would be able to use in older code 











